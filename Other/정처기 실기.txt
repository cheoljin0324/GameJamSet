운영체제 3문제
SQL(데이터베이스) 7문제
네트워크 3문제
알고리즘 6문제
애플리케이션 1문제

네트워크

서브넷 마스크 사용 가능 아이피 개수 : n.n.n.n 일때 2 ^ ( n이 0인 개수 * 8 ) - 2 개

OSI 7계층 {
    응용 : 응용 서비스를 담당하는 계층, 데이터 단위, 
    표현 : 데이터를 알맞게 변환하는 계층, 데이터 단위, 
    세션 : 통신에 대한 제어 구조를 제공하는 계층, 데이터 단위, 
    전송 : 신뢰성 있는 데이터 전송하는 계층, 종단 대 종단 ( end to end ) 통신, 세그먼트 단위, 
    네트워크 : IP주소를 이용하여 최적의 경로를 선택하는 계층, 패킷 단위, 
    데이터링크 : 프레임 단위로 데이터를 신뢰성 있게 전송하는 계층, 노드 대 노드 통신, 프레임 단위, 
    물리 : 전송에서 필요한 두 장치를 연결하기 위한 계층, 비트 단위
}

TPC / IP 계층 {
    응용 : 응용 계층, 표현 계층, 세션 계층,
    전송 : 전송 계층,
    인터넷 : 네트워크 계층,
    네트워크 엑세스 : 데이터링크 계층, 물리 계층
}

네트워크 장비 {
    허브 : 장치들을 하나로 연결,
    리피터 : 줄어든 신호를 증폭,
    브리지 : 소프트웨어적으로 프레임 데이터를 전송, 
    스위치 : 하드웨어적으로 프레임 데이터를 전송,
    라우터 : 다른 구조의 망을 연결,
    게이트웨이 : 다른 네트워크를 상호 접속
}

라우팅 프로토콜 {
    RIP : 거리 벡터 알고리즘 기반, 홉 카운트를 설정해 최적의 경로 설정,
    OSPF : 링크 상태 알고리즘 기반
}

SQL

정규화 : 데이터 중복을 배제하여 이상의 발생 방지 및 자료 공간 최소화
튜플(Tuple) : 테이블에서의 행, 레코드라고 불리기도 한다
속성(Attribute) : 테이블에서의 열, 도메인으로 구성되어있다
카티널리티 : 튜플의 개수
차수 : 속성(Attribute) 의 개수
도메인 : 속성이 취할 수 있는 값의 범위
스키마 : 릴레이션을 구성하는 속성들의 집합
인스턴스 : 릴레이션을 구성하는 튜플들의 집합
VIEW : 사용자에게 접근이 허용된 자료만을 보여주는 가상의 테이블

데이터베이스 {
    계층형 : 트리구조, 부모 - 자식,
    네트워크형 : 노드형태, 논리적 표현
    관계형 : 키 - 밸류, 행과 열을 가지는 표 형식
    객체지향 : 객체 자체를 저장하는 것
}

키 {
    슈퍼키 : 유일성만 만족,
    후보키 : 유일성과 최소성 만족,
    기본키 : 후보키들중 하나,
    대체키 : 기본키가 아닌 후보키들,
    외래키 : 참조되는 테이블의 기본키와 동일한 속성
}

명령어 {
    REBUID : 인덱스 재구성 명령어,
    GRANT : 권한 부여,
    RESTRICT : 참조중일 때 제거를 취소하는 명령어,
    INSTINCT : 참조중일 때 함께 제거하는 명령어,
    ROLLBACK : 원래 상태로 되돌리는 명령어
}

알고리즘

time.h : 시간 처리 기능 라이브러리
clock( ) : 프로그램의 시작부터 함수가 사용된 시점까지 도달하는 데 걸린 시간을 클럭으로 환산하여 변환

자료형 크기 {
    char : 1,
    string : 4,
    int : 4,
    float : 4,
    long : 8, 
    double : 8,
}

데이터 표현 {
    10진수 : 아무 표시 없음,
    8진수 : 0으로 시작,
    16진수 : 0x로 시작,
    2진수 : 0b로 시작
}

연산 {
    & : AND 연산,
    | : OR 연산,
    ^ : XOR 연산, 
    ~ : 1의 보수
}

format {
    %c : char,
    %s : string,
    %d : int ( 소수점 내림 계산 ) ,
    %f : float ( ex) %1.1f 소수점 반올림 계산 ) ,
    %l : long,
    %x : 16진수
}

프로토콜  ( 구문, 의미, 타이밍 )

응용계층 {
    HTTP : 인터넷 상 데이터 교환,
    HTTPS : HTTP 업그레이드,
    FTP : 파일 교환,
    DNS : 도메인 이름 변환,
    DHCP : 클라이언트에게 IP 주소를 제공,
    Telnet : 보안성 낮은 원격 통신,
    SSH : 보안성 높은 원격 통신
}

전송계층 {
    TCP : 신뢰성 있는 데이터 전송, 
    UDP : 신뢰성 낮은 데이터 전송
}

인터넷계층 {
    IP
    ARP
    ICMP
    IGMP
}

OS

운영체제 : 제어 프로그램 +  처리 프로그램

UNIX {
    쉘(Shell) : 명령어 해석기
    커널(Kernel) : UNIX의 핵심, 장치 관리, 프로세스 관리 등의 작업 수행
}

애플리케이션 테스트

테스트 수행과정 : 단위 테스트 > 통합 테스트 > 시스템 테스트 > 인수 (검수) 테스트

단위 테스트 (작은 소프트웨어 단위 테스트) {
    인터페이스 테스트,
    자료구조 테스트
}
통합 테스트 (통합된 컴포넌트 간의 상호작용 테스트) {
    빅뱅 테스트,
    상향식 테스트,
    하향식 테스트
}
시스템 테스트 (통합된 단위 시스템의 기능 테스트) {
    기능 요구사항 테스트 (명세서 기반) ,
    비기능 요구사항 테스트 (내부구조 기반)
}
인수 테스트 (사용자 테스트) {
    알파 테스트 (통제된 환경) ,
    베타 테스트 (실제 사용 환경)
}

화이트박스 테스트 (내부 구조 테스트) {
    기초 경로 테스트,
    제어흐름 테스트,
    조건 검사,
    루프 검사
}
블랙박스 테스트 (사용자 요구사항, 기능 및 동작 테스트) {
    균등분할 테스트 (입력 데이터를 여러 분류로 나누어 검사) ,
    원인 - 효과 그래프 검사 (입출력 분석) ,
    비교 검사 (여러 버전의 프로그램에 같은 값을 입력해 결과 비교 분석) ,
    경계값(한계값) 분석
}

테스트 목적에 따른 분류 {
    회복 테스트 (실패 유도 후 복귀 여부 테스트) ,
    회귀 테스트 (수정한 시스템에 의한 오류 확인 테스트) ,
    안전 테스트,
    구조 테스트,
    병행 테스트
}

테스트 하네스 (테스트 도우미 환경) {
    테스트 드라이버 (모듈 호출, 파라매터 전달, 결과 도출 / 상향식 테스트에 필요) ,
    테스트 스텁 (모듈 기능 수행 도구 / 하향식 테스트에 필요)
}

결함

결함 관리 프로세스 : 관리 계획 > 기록 > 검토 > 수정 > 재확인 > 최종 분석 및 보고서 작성

결함 상태 {
    결함 등록,
    결함 검토,
    결함 할당 (개발자에게 수정 요청) ,
    결함 수정,
    결함 종료 (결함 해결),
    결함 해제
}

결함 유형 {
    시스템 결함 : 기능 문제,
    기능 결함 : 요구사항 불일치,
    GUI 결함 : UI 문제,
    문서 결함 : 의사소통 기록 문제
}

소프트웨어 테스트

소프트웨어 인스펙션 : 소프트웨어의 품질 개선과 비용 절감을 위한 품질 보증기법, 포함된 에러의 90% 까지 찾아낼 수 있는 테스트 방법
소프트웨어 형상관리 : 소프트웨어 형상을 보호하는 활동, 변경 요인에 대한 관리 ex) 버전관리